CREATE DATABASE homework_5;

USE homework_5;

CREATE TABLE cars
(
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
name VARCHAR(40) NOT NULL,
cost INT NOT NULL
);

INSERT INTO cars(name, cost)
VALUES
("Audi", 52642),
("Mercedes", 57127),
("Skoda", 9000),
("Volvo", 29000),
("Bentley", 350000),
("Citroen", 21000),
("Hummer", 41400),
("Volkswagen", 21600);

SELECT * FROM cars;

/*
1.	Создайте представление, в которое попадут автомобили стоимостью  до 25 000 долларов
*/

DROP View cheap_cars;

CREATE VIEW cheap_cars AS 
SELECT name 
FROM cars
WHERE cost < 25000;

SELECT * FROM cheap_cars;

/*
2. Изменить в существующем представлении порог для стоимости: 
пусть цена будет до 30 000 долларов (используя оператор ALTER VIEW)
*/

ALTER VIEW cheap_cars AS 
SELECT name 
FROM cars
WHERE cost < 30000;

SELECT * FROM cheap_cars;

/*
3. Создайте представление, в котором будут только автомобили марки “Шкода” и “Ауди”
*/

CREATE VIEW skoda_audi AS 
SELECT name, cost 
FROM cars
WHERE name IN ("Skoda", "Audi");

SELECT * FROM skoda_audi;

/*
4.  Вывести название и цену для всех анализов, которые продавались 5 февраля 2020 и всю следующую неделю. 
*/

CREATE TABLE Analysis
(
an_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
an_name VARCHAR(100) NOT NULL,
an_cost INT NOT NULL,
an_price INT NOT NULL,
an_group INT NOT NULL,
FOREIGN KEY (an_group) REFERENCES Groups_a(gr_id)
);

CREATE TABLE Groups_a
(
gr_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
gr_name VARCHAR(100) NOT NULL,
gr_temp VARCHAR(100) NOT NULL
);
DROP TABLE Orders;
CREATE TABLE Orders
(
ord_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
ord_date DATE NOT NULL,
ord_an INT NOT NULL,
FOREIGN KEY (ord_an) REFERENCES Analysis(an_id)
);

INSERT INTO Analysis(an_name, an_cost, an_price, an_group)
VALUES
("общий анализ мочи", 100, 200, 1),
("общий анализ крови", 300, 600, 2),
("биохимический анализ крови", 500, 1000, 2),
("посев мочи", 400, 800, 1),
("анализ кала на яйа глист", 200, 400, 3),
("капрограмма", 300, 600, 3);

INSERT INTO Groups_a(gr_name, gr_temp)
VALUES
("анализы мочи", "от +5 до + 20"),
("анализы крови", "от +5 до + 20"),
("анализы кала", "от +5 до + 20");

INSERT INTO Orders(ord_date, ord_an)
VALUES
("2020-02-04", 4),
("2020-02-05", 2),
("2020-02-05", 2),
("2020-02-05", 3),
("2020-02-05", 4),
("2020-02-06", 1),
("2020-02-06", 6),
("2020-02-06", 5),
("2020-02-06", 4),
("2020-02-06", 1),
("2020-02-7", 2),
("2020-02-8", 3),
("2020-02-9", 1),
("2020-02-11", 3),
("2020-02-15", 5);

SELECT a.an_name AS "Название анализа", SUM(a.an_price) AS "Цена всех анализов"
FROM Orders AS o
LEFT JOIN Analysis AS a
ON o.ord_an = a.an_id
WHERE o.ord_date BETWEEN "2020-02-05" AND "2020-02-12"
GROUP BY a.an_name
ORDER BY SUM(a.an_price);

-- Оконная функция
SELECT o.ord_date, a.an_name AS "Название анализа", a.an_price AS "Цена анализа", 
SUM(a.an_price) OVER(Partition BY o.ord_date) AS "Цена всех анализов" 
FROM Orders AS o
LEFT JOIN Analysis AS a
ON o.ord_an = a.an_id
WHERE o.ord_date BETWEEN "2020-02-05" AND "2020-02-12";

/*
4. Добавьте новый столбец под названием «время до следующей станции». 
Чтобы получить это значение, мы вычитаем время станций для пар смежных станций.
 Мы можем вычислить это значение без использования оконной функции SQL, 
 но это может быть очень сложно. Проще это сделать с помощью оконной функции LEAD . 
 Эта функция сравнивает значения из одной строки со следующей строкой, чтобы получить результат. 
 В этом случае функция сравнивает значения в столбце «время» для станции со станцией сразу после нее.
*/

CREATE TABLE IF NOT EXISTS train_schedule
(
train_id INT NOT NULL,
station VARCHAR(20) NOT NULL,
station_time TIME NOT NULL
);


INSERT INTO train_schedule 
(train_id, station, station_time)
VALUES
(110, "San Francisco", '10:00:00'),
(110, "Redwood City", "10:54:00"),
(110, "Palo Alto", "11:02:00"),
(110, "San Jose", "12:35:00"),
(120, "San Francisco", "11:00:00"),
(120, "Palo Alto", "12:49:00"),
(120, "San Jose", "13:30:00");

SELECT * FROM train_schedule;

SELECT 
	train_schedule.*, 
    TIMEDIFF
    (
		LEAD(station_time) 
        OVER(PARTITION BY train_id), 
        station_time
	) AS  time_to_next_station
FROM train_schedule;